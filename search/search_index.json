{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]"},"docs":[{"location":"","text":"Quafu document Installation Run following codes in command line git clone https://github.com/ScQ-Cloud/quafu cd quafu python setup.py build python setup.py install Set up your Quafu account To use the toolkit quafu, firstly you need to register on the Quafu website and get your apitoken <your API token> . If you already have an account, execute the follow code to set up your account. from quafu import User user = User() user.save_apitoken(<your API token>) You only need to save your token once and no longer need to execute above code when you use quafu after, except you want to change your account. Build your first quantum circuit Initialize a circuit with 5 qubits import numpy as np from quafu import QuantumCircuit q = QuantumCircuit(5) Add quantum gates. For quantum gates Quafu supports, please check the API reference for QuantumCircuit q.x(0) q.x(1) q.cnot(2, 1) q.ry(1, np.pi/2) q.rx(2, np.pi) q.rz(3, 0.1) q.cz(2, 3) <quafu.circuits.quantum_circuit.QuantumCircuit at 0x23a358ae850> Add measurement information including qubits measured ( measures ) and the classical bits keeping the measured results ( cbits ). If there is no measurement information provided, all qubits are measured by default. measures = [0, 1, 2, 3] cbits = [0, 1, 2, 3] q.measure(measures, cbits=cbits) You can draw the circuit using the draw_circuit method q.draw_circuit() q[0] -----X-------------------------- M->c[0] q[1] -----X-------+---RY(1.571)------ M->c[1] | q[2] -------------*---RX(3.142)---*-- M->c[2] CZ q[3] -RZ(0.100)-------------------+-- M->c[3] You can also initial your quantum circuit with openqasm text. QuantumCircuit class provides the from_openqasm method for initializing quantum circuit directly from openqasm. qc = QuantumCircuit(4) test_ghz = \"\"\"OPENQASM 2.0; include \"qelib1.inc\"; qreg q[4]; h q[0]; cx q[0],q[1]; cx q[0],q[2]; cx q[0],q[3]; \"\"\" qc.from_openqasm(test_ghz) qc.draw_circuit() q[0] -H---*----*----*-- M->c[0] | | | q[1] -----+----|----|-- M->c[1] | | q[2] ----------+----|-- M->c[2] | q[3] ---------------+-- M->c[3] Submit your circuit Now you are ready to submit the circuit to the experimental backend. First initial a Task object and load your account. from quafu import Task task = Task() task.load_account() You can configure your task properties using the config method. Here we choose the backend ( backend ) as ScQ-P10 , the single shots number ( shots ) as 2000 and to compile the circuit on backend ( compile ). task.config(backend=\"ScQ-P10\", shots=2000, compile=True) If you set the compile parameter to False , make sure that you know the topology of the backend well and submit valid circuit. Send the quantum circuit to the backend. Here we send circuit q . res = task.send(q) You can use the returned results to check the count and amplitude on each measured bit string. The output bits are arranged as 0, 1, 2,... from left to the right. print(res.counts) #counts print(res.amplitudes) #amplitude res.plot_amplitudes() OrderedDict([('0010', 22), ('0011', 2), ('0110', 20), ('1000', 30), ('1001', 2), ('1010', 837), ('1011', 156), ('1100', 44), ('1110', 734), ('1111', 153)]) {'0010': 0.011, '0011': 0.001, '0110': 0.01, '1000': 0.015, '1001': 0.001, '1010': 0.4185, '1011': 0.078, '1100': 0.022, '1110': 0.367, '1111': 0.0765} If you want to check the correctness the execute results. Quafu provide simple circuit similator based on the qutip pacakge. from quafu.simulators.qutip_simulator import simulate simu_res = simulate(q) simu_res.plot_amplitudes(full=True) You can also submit the 4-bit ghz circuit qc built from openqasm. res = task.send(qc) res.plot_amplitudes() simu_res = simulate(qc) simu_res.plot_amplitudes() If you don't want to plot the results for basis with zero amplitudes, set the parameter full in method plot_amplitudes to False. Note that this parameter is only valid for results returned by simulator. Submit circuit and measure observables Quafu provides measuring observables with an excuted quantum circuit. You can input Pauli operators that need to measure expectation values to the submit method. For example, you can input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] to calcuate the expectation of operators \\sigma^x_0\\sigma^y_1\\sigma^x_2 and \\sigma^z_1 . The submit method will minimize the executing times of the circuit with different measurement basis that can calculate all expectations of input operators. Here we show how to measure the energy expection of the Ising chain H=\\sum_i \\sigma^z_i \\sigma^z_{i+1} + g \\sum_i \\sigma^x_i. First we initialize a circuit with three Hadamard gate q = QuantumCircuit(5) for i in range(5): if i % 2 == 0: q.h(i) q.draw_circuit() measures = list(range(5)) q.measure(measures) q[0] -H- M->c[0] q[1] --- M->c[1] q[2] -H- M->c[2] q[3] --- M->c[3] q[4] -H- M->c[4] Next we set operators that need to be measured to calculate the energy expectation, and submit the circuit using submit method test_Ising = [[\"X\", [i]] for i in range(5)] test_Ising.extend([[\"ZZ\", [i, i+1]] for i in range(4)]) res, obsexp = task.submit(q, test_Ising) Job start, need measured in [['XXXXX', [0, 1, 2, 3, 4]], ['ZZZZZ', [0, 1, 2, 3, 4]]] The function return measurement results and operator expectations. The measurement results only contain two ExecResult object since the circuit is only executed twice, with measurement basis [['XXXXX', [0, 1, 2, 3, 4]] and ['ZZZZZ', [0, 1, 2, 3, 4]]] respectively. res[0].plot_amplitudes() res[1].plot_amplitudes() The return operator expectations ( obsexp ) is a list with a length equal to the input operator number. We can use it to calculate the energy expectation print(obsexp) g = 0.5 E = g*sum(obsexp[:5])+sum(obsexp[5:]) print(E) [0.9930000000000001, -0.018000000000000016, 1.001, 0.03200000000000003, 1.001, 0.007000000000000006, 0.007000000000000006, -0.05800000000000005, -0.05800000000000005] 1.4024999999999999 API Reference ExecResult Bases: Result Class that save the execute results returned from backend. Attributes: Name Type Description counts dict Samples counts on each bitstring. amplitudes dict Calculated amplitudes on each bitstring. taskid int Unique task id for the execute result. transpiled_circuit QuantumCircuit Quantum circuit transpiled on backend. Source code in quafu\\results\\results.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class ExecResult ( Result ): \"\"\" Class that save the execute results returned from backend. Attributes: counts (dict): Samples counts on each bitstring. amplitudes (dict): Calculated amplitudes on each bitstring. taskid (int): Unique task id for the execute result. transpiled_circuit (QuantumCircuit): Quantum circuit transpiled on backend. \"\"\" def __init__ ( self , input_dict , measures ): self . measures = measures self . res = eval ( input_dict [ 'res' ]) self . counts = OrderedDict ( sorted ( self . res . items (), key = lambda s : s [ 0 ])) self . logicalq_res = {} cbits = list ( self . measures . values ()) for key , values in self . counts . items (): newkey = \"\" . join ([ key [ i ] for i in cbits ]) self . logicalq_res [ newkey ] = values self . taskid = input_dict [ 'task_id' ] self . transpiled_openqasm = input_dict [ \"openqasm\" ] from ..circuits.quantum_circuit import QuantumCircuit self . transpiled_circuit = QuantumCircuit ( 0 ) self . transpiled_circuit . from_openqasm ( self . transpiled_openqasm ) self . measure_base = [] total_counts = sum ( self . counts . values ()) self . amplitudes = {} for key in self . counts : self . amplitudes [ key ] = self . counts [ key ] / total_counts def calculate_obs ( self , pos ): \"\"\" Calculate observables on input position Args: pos (list[int]): Positions of observalbes. \"\"\" return measure_obs ( pos , self . logicalq_res ) def plot_amplitudes ( self ): \"\"\" Plot the amplitudes from execute results. \"\"\" bitstrs = list ( self . amplitudes . keys ()) amps = list ( self . amplitudes . values ()) plt . figure () plt . bar ( range ( len ( amps )), amps , tick_label = bitstrs ) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" ) calculate_obs ( pos ) Calculate observables on input position Args: pos (list[int]): Positions of observalbes. Source code in quafu\\results\\results.py 45 46 47 48 49 50 51 def calculate_obs ( self , pos ): \"\"\" Calculate observables on input position Args: pos (list[int]): Positions of observalbes. \"\"\" return measure_obs ( pos , self . logicalq_res ) plot_amplitudes () Plot the amplitudes from execute results. Source code in quafu\\results\\results.py 53 54 55 56 57 58 59 60 61 62 def plot_amplitudes ( self ): \"\"\" Plot the amplitudes from execute results. \"\"\" bitstrs = list ( self . amplitudes . keys ()) amps = list ( self . amplitudes . values ()) plt . figure () plt . bar ( range ( len ( amps )), amps , tick_label = bitstrs ) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" ) QuantumCircuit Bases: object Source code in quafu\\circuits\\quantum_circuit.pyclass QuantumCircuit ( object ): def __init__ ( self , num ): \"\"\" Initialize a QuantumCircuit object Args: num (int): Total qubit number used \"\"\" self . num = num self . gates = [] self . openqasm = \"\" self . circuit = [] self . measures = dict ( zip ( range ( num ), range ( num ))) self . used_qubits = [] def get_used_qubits ( self ): self . layered_circuit () return self . used_qubits def layered_circuit ( self ): \"\"\" Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. \"\"\" num = self . num gatelist = self . gates gateQlist = [[] for i in range ( num )] used_qubits = [] for gate in gatelist : if isinstance ( gate , SingleQubitGate ): gateQlist [ gate . pos ] . append ( gate ) if gate . pos not in used_qubits : used_qubits . append ( gate . pos ) elif isinstance ( gate , Barrier ) or isinstance ( gate , TwoQubitGate ): pos1 = min ( gate . pos ) pos2 = max ( gate . pos ) gateQlist [ pos1 ] . append ( gate ) for j in range ( pos1 + 1 , pos2 + 1 ): gateQlist [ j ] . append ( None ) if isinstance ( gate , TwoQubitGate ): for pos in gate . pos : if pos not in used_qubits : used_qubits . append ( pos ) maxlayer = max ([ len ( gateQlist [ j ]) for j in range ( pos1 , pos2 + 1 )]) for j in range ( pos1 , pos2 + 1 ): layerj = len ( gateQlist [ j ]) pos = layerj - 1 if not layerj == maxlayer : for i in range ( abs ( layerj - maxlayer )): gateQlist [ j ] . insert ( pos , None ) maxdepth = max ([ len ( gateQlist [ i ]) for i in range ( num )]) for gates in gateQlist : gates . extend ([ None ] * ( maxdepth - len ( gates ))) for m in self . measures . keys (): if m not in used_qubits : used_qubits . append ( m ) used_qubits = np . sort ( used_qubits ) new_gateQlist = [] for old_qi in range ( len ( gateQlist )): gates = gateQlist [ old_qi ] if old_qi in used_qubits : new_gateQlist . append ( gates ) lc = np . array ( new_gateQlist ) lc = np . vstack (( used_qubits , lc . T )) . T self . circuit = lc self . used_qubits = list ( used_qubits ) return self . circuit def draw_circuit ( self ): \"\"\" Draw layered circuit using ASCII, print in terminal. \"\"\" self . layered_circuit () gateQlist = self . circuit num = gateQlist . shape [ 0 ] depth = gateQlist . shape [ 1 ] - 1 printlist = np . array ([[ \"\" ] * depth for i in range ( 2 * num )], dtype = \"<U30\" ) reduce_map = dict ( zip ( gateQlist [:, 0 ], range ( num ))) reduce_map_inv = dict ( zip ( range ( num ), gateQlist [:, 0 ])) for l in range ( depth ): layergates = gateQlist [:, l + 1 ] maxlen = 3 for i in range ( num ): gate = layergates [ i ] if isinstance ( gate , FixedSingleQubitGate ): printlist [ i * 2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaSingleQubitGate ): gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ i * 2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , FixedTwoQubitGate ): q1 = reduce_map [ min ( gate . pos )] q2 = reduce_map [ max ( gate . pos )] printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" if isinstance ( gate , ControlGate ): printlist [ reduce_map [ gate . ctrl ] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . targ ] * 2 , l ] = \"+\" maxlen = max ( maxlen , 5 ) if gate . name not in [ \"CNOT\" , \"CX\" ]: printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) else : if gate . name == \"SWAP\" : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"*\" else : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaTwoQubitGate ): q1 = reduce_map ( min ( gate . pos )) q2 = reduce_map ( max ( gate . pos )) printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" gatestr = \"\" if isinstance ( gate . paras , Iterable ): gatestr = ( \" %s (\" % gate . name + \",\" . join ( [ \" %.3f \" % para for para in gate . paras ]) + \")\" ) else : gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ q1 + q2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , Barrier ): pos = [ i for i in gate . pos if i in reduce_map . keys ()] q1 = reduce_map [ min ( pos )] q2 = reduce_map [ max ( pos )] printlist [ 2 * q1 : 2 * q2 + 1 , l ] = \"||\" maxlen = max ( maxlen , len ( \"||\" )) printlist [ - 1 , l ] = maxlen circuitstr = [] for j in range ( 2 * num - 1 ): if j % 2 == 0 : linestr = ( \"q[ %d ]\" % ( reduce_map_inv [ j // 2 ])) . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \"-\" ) for l in range ( depth )]) if reduce_map_inv [ j // 2 ] in self . measures . keys (): linestr += \" M->c[ %d ]\" % self . measures [ reduce_map_inv [ j // 2 ]] circuitstr . append ( linestr ) else : circuitstr . append ( \"\" . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \" \" ) for l in range ( depth )])) circuitstr = \" \\n \" . join ( circuitstr ) print ( circuitstr ) def from_openqasm ( self , openqasm ): \"\"\" Initialize the circuit from openqasm text. \"\"\" from numpy import pi import re self . openqasm = openqasm lines = self . openqasm . splitlines () self . gates = [] self . measures = {} measured_qubits = [] global_valid = True for line in lines [ 2 :]: if line : operations_qbs = line . split ( \" \" , 1 ) operations = operations_qbs [ 0 ] if operations == \"qreg\" : qbs = operations_qbs [ 1 ] self . num = int ( re . findall ( \"\\d+\" , qbs )[ 0 ]) elif operations == \"creg\" : pass elif operations == \"measure\" : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] mb = inds [ 0 ] cb = inds [ 1 ] self . measures [ mb ] = cb measured_qubits . append ( mb ) else : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] valid = True for pos in inds : if pos in measured_qubits : valid = False global_valid = False break if valid : if operations == \"barrier\" : self . barrier ( inds ) else : sp_op = operations . split ( \"(\" ) gatename = sp_op [ 0 ] if len ( sp_op ) > 1 : paras = sp_op [ 1 ] . strip ( \"()\" ) parastr = paras . split ( \",\" ) paras = [ eval ( parai , { \"pi\" : pi }) for parai in parastr ] if gatename == \"cx\" : self . cnot ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cy\" : self . cy ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cz\" : self . cz ( inds [ 0 ], inds [ 1 ]) elif gatename == \"swap\" : self . swap ( inds [ 0 ], inds [ 1 ]) elif gatename == \"rx\" : self . rx ( inds [ 0 ], paras [ 0 ]) elif gatename == \"ry\" : self . ry ( inds [ 0 ], paras [ 0 ]) elif gatename == \"rz\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"x\" : self . x ( inds [ 0 ]) elif gatename == \"y\" : self . y ( inds [ 0 ]) elif gatename == \"z\" : self . z ( inds [ 0 ]) elif gatename == \"h\" : self . h ( inds [ 0 ]) elif gatename == \"u1\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u2\" : self . rz ( inds [ 0 ], paras [ 1 ]) self . ry ( inds [ 0 ], pi / 2 ) self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u3\" : self . rz ( inds [ 0 ], paras [ 2 ]) self . ry ( inds [ 0 ], paras [ 0 ]) self . rz ( inds [ 0 ], paras [ 1 ]) else : print ( \"Warning: Operations %s may be not supported by QuantumCircuit class currently.\" % gatename ) if not self . measures : self . measures = dict ( zip ( range ( self . num ), range ( self . num ))) if not global_valid : print ( \"Warning: All operations after measurement will be removed for executing on experiment\" ) def to_openqasm ( self ): \"\"\" Convert the circuit to openqasm text. Returns: openqasm text. \"\"\" qasm = '''OPENQASM 2.0; \\n include \"qelib1.inc\"; \\n ''' qasm += \"qreg q[ %d ]; \\n \" % self . num qasm += \"creg meas[ %d ]; \\n \" % len ( self . measures ) for gate in self . gates : if isinstance ( gate , FixedSingleQubitGate ): qasm += \" %s q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos ) elif isinstance ( gate , ParaSingleQubitGate ): qasm += \" %s ( %s ) q[ %d ]; \\n \" % ( gate . name . lower (), gate . paras , gate . pos ) elif isinstance ( gate , FixedTwoQubitGate ): qasm += \" %s q[ %d ],q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos [ 0 ], gate . pos [ 1 ]) elif type ( gate ) == Barrier : qasm += \"barrier \" + \",\" . join ([ \"q[ %d ]\" % p for p in gate . pos ]) + \"; \\n \" for key in self . measures : qasm += \"measure q[ %d ] -> meas[ %d ]; \\n \" % ( key , self . measures [ key ]) self . openqasm = qasm return qasm def h ( self , pos : int ): \"\"\" Hadamard gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( HGate ( pos )) return self def x ( self , pos : int ): \"\"\" X gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( XGate ( pos )) return self def y ( self , pos : int ): \"\"\" Y gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( YGate ( pos )) return self def z ( self , pos : int ): \"\"\" Z gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( ZGate ( pos )) return self def rx ( self , pos : int , para ): \"\"\" Single qubit rotation Rx gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RXGate ( pos , para )) return self def ry ( self , pos : int , para ): \"\"\" Single qubit rotation Ry gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RYGate ( pos , para )) return self def rz ( self , pos : int , para ): \"\"\" Single qubit rotation Rz gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RZGate ( pos , para )) return self def cnot ( self , ctrl : int , tar : int ): \"\"\" CNOT gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CXGate ([ ctrl , tar ])) return self def cy ( self , ctrl : int , tar : int ): \"\"\" CY gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CYGate ([ ctrl , tar ])) return self def cz ( self , ctrl : int , tar : int ): \"\"\" CZ gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CZGate ([ ctrl , tar ])) return self # def fsim(self, q1, q2, theta, phi): # \"\"\" # fSim gate. # Args: # q1, q2 (int): qubits the gate act. # theta (float): parameter theta in fSim. # phi (float): parameter phi in fSim. # \"\"\" # self.gates.append(FsimGate([q1, q2], [theta, phi])) def swap ( self , q1 : int , q2 : int ): \"\"\" SWAP gate Args: q1 (int): qubit the gate act. q2 (int): qubit the gate act. \"\"\" self . gates . append ( SwapGate ([ q1 , q2 ])) return self def barrier ( self , qlist : List [ int ]): \"\"\" Add barrier for qubits in qlist. Args: qlist (list[int]): A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). \"\"\" self . gates . append ( Barrier ( qlist )) return self def measure ( self , pos , cbits : List [ int ] = []): \"\"\" Measurement setting for experiment device. Args: pos (int): Qubits need measure. cbits (List[int]): Classical bits keeping the measure results. \"\"\" self . measures = dict ( zip ( pos , range ( len ( pos )))) if cbits : if len ( cbits ) == len ( self . measures ): self . measures = dict ( zip ( pos , cbits )) else : raise CircuitError ( \"Number of measured bits should equal to the number of classical bits\" ) __init__ ( num ) Initialize a QuantumCircuit object Parameters: Name Type Description Default num int Total qubit number used required Source code in quafu\\circuits\\quantum_circuit.py 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , num ): \"\"\" Initialize a QuantumCircuit object Args: num (int): Total qubit number used \"\"\" self . num = num self . gates = [] self . openqasm = \"\" self . circuit = [] self . measures = dict ( zip ( range ( num ), range ( num ))) self . used_qubits = [] barrier ( qlist ) Add barrier for qubits in qlist. Parameters: Name Type Description Default qlist list [ int ] A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). required Source code in quafu\\circuits\\quantum_circuit.py 422 423 424 425 426 427 428 429 430 def barrier ( self , qlist : List [ int ]): \"\"\" Add barrier for qubits in qlist. Args: qlist (list[int]): A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). \"\"\" self . gates . append ( Barrier ( qlist )) return self cnot ( ctrl , tar ) CNOT gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 367 368 369 370 371 372 373 374 375 376 def cnot ( self , ctrl : int , tar : int ): \"\"\" CNOT gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CXGate ([ ctrl , tar ])) return self cy ( ctrl , tar ) CY gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 378 379 380 381 382 383 384 385 386 387 def cy ( self , ctrl : int , tar : int ): \"\"\" CY gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CYGate ([ ctrl , tar ])) return self cz ( ctrl , tar ) CZ gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 389 390 391 392 393 394 395 396 397 398 def cz ( self , ctrl : int , tar : int ): \"\"\" CZ gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CZGate ([ ctrl , tar ])) return self draw_circuit () Draw layered circuit using ASCII, print in terminal. Source code in quafu\\circuits\\quantum_circuit.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def draw_circuit ( self ): \"\"\" Draw layered circuit using ASCII, print in terminal. \"\"\" self . layered_circuit () gateQlist = self . circuit num = gateQlist . shape [ 0 ] depth = gateQlist . shape [ 1 ] - 1 printlist = np . array ([[ \"\" ] * depth for i in range ( 2 * num )], dtype = \"<U30\" ) reduce_map = dict ( zip ( gateQlist [:, 0 ], range ( num ))) reduce_map_inv = dict ( zip ( range ( num ), gateQlist [:, 0 ])) for l in range ( depth ): layergates = gateQlist [:, l + 1 ] maxlen = 3 for i in range ( num ): gate = layergates [ i ] if isinstance ( gate , FixedSingleQubitGate ): printlist [ i * 2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaSingleQubitGate ): gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ i * 2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , FixedTwoQubitGate ): q1 = reduce_map [ min ( gate . pos )] q2 = reduce_map [ max ( gate . pos )] printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" if isinstance ( gate , ControlGate ): printlist [ reduce_map [ gate . ctrl ] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . targ ] * 2 , l ] = \"+\" maxlen = max ( maxlen , 5 ) if gate . name not in [ \"CNOT\" , \"CX\" ]: printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) else : if gate . name == \"SWAP\" : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"*\" else : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaTwoQubitGate ): q1 = reduce_map ( min ( gate . pos )) q2 = reduce_map ( max ( gate . pos )) printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" gatestr = \"\" if isinstance ( gate . paras , Iterable ): gatestr = ( \" %s (\" % gate . name + \",\" . join ( [ \" %.3f \" % para for para in gate . paras ]) + \")\" ) else : gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ q1 + q2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , Barrier ): pos = [ i for i in gate . pos if i in reduce_map . keys ()] q1 = reduce_map [ min ( pos )] q2 = reduce_map [ max ( pos )] printlist [ 2 * q1 : 2 * q2 + 1 , l ] = \"||\" maxlen = max ( maxlen , len ( \"||\" )) printlist [ - 1 , l ] = maxlen circuitstr = [] for j in range ( 2 * num - 1 ): if j % 2 == 0 : linestr = ( \"q[ %d ]\" % ( reduce_map_inv [ j // 2 ])) . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \"-\" ) for l in range ( depth )]) if reduce_map_inv [ j // 2 ] in self . measures . keys (): linestr += \" M->c[ %d ]\" % self . measures [ reduce_map_inv [ j // 2 ]] circuitstr . append ( linestr ) else : circuitstr . append ( \"\" . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \" \" ) for l in range ( depth )])) circuitstr = \" \\n \" . join ( circuitstr ) print ( circuitstr ) from_openqasm ( openqasm ) Initialize the circuit from openqasm text. Source code in quafu\\circuits\\quantum_circuit.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 def from_openqasm ( self , openqasm ): \"\"\" Initialize the circuit from openqasm text. \"\"\" from numpy import pi import re self . openqasm = openqasm lines = self . openqasm . splitlines () self . gates = [] self . measures = {} measured_qubits = [] global_valid = True for line in lines [ 2 :]: if line : operations_qbs = line . split ( \" \" , 1 ) operations = operations_qbs [ 0 ] if operations == \"qreg\" : qbs = operations_qbs [ 1 ] self . num = int ( re . findall ( \"\\d+\" , qbs )[ 0 ]) elif operations == \"creg\" : pass elif operations == \"measure\" : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] mb = inds [ 0 ] cb = inds [ 1 ] self . measures [ mb ] = cb measured_qubits . append ( mb ) else : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] valid = True for pos in inds : if pos in measured_qubits : valid = False global_valid = False break if valid : if operations == \"barrier\" : self . barrier ( inds ) else : sp_op = operations . split ( \"(\" ) gatename = sp_op [ 0 ] if len ( sp_op ) > 1 : paras = sp_op [ 1 ] . strip ( \"()\" ) parastr = paras . split ( \",\" ) paras = [ eval ( parai , { \"pi\" : pi }) for parai in parastr ] if gatename == \"cx\" : self . cnot ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cy\" : self . cy ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cz\" : self . cz ( inds [ 0 ], inds [ 1 ]) elif gatename == \"swap\" : self . swap ( inds [ 0 ], inds [ 1 ]) elif gatename == \"rx\" : self . rx ( inds [ 0 ], paras [ 0 ]) elif gatename == \"ry\" : self . ry ( inds [ 0 ], paras [ 0 ]) elif gatename == \"rz\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"x\" : self . x ( inds [ 0 ]) elif gatename == \"y\" : self . y ( inds [ 0 ]) elif gatename == \"z\" : self . z ( inds [ 0 ]) elif gatename == \"h\" : self . h ( inds [ 0 ]) elif gatename == \"u1\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u2\" : self . rz ( inds [ 0 ], paras [ 1 ]) self . ry ( inds [ 0 ], pi / 2 ) self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u3\" : self . rz ( inds [ 0 ], paras [ 2 ]) self . ry ( inds [ 0 ], paras [ 0 ]) self . rz ( inds [ 0 ], paras [ 1 ]) else : print ( \"Warning: Operations %s may be not supported by QuantumCircuit class currently.\" % gatename ) if not self . measures : self . measures = dict ( zip ( range ( self . num ), range ( self . num ))) if not global_valid : print ( \"Warning: All operations after measurement will be removed for executing on experiment\" ) h ( pos ) Hadamard gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 291 292 293 294 295 296 297 298 299 def h ( self , pos : int ): \"\"\" Hadamard gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( HGate ( pos )) return self layered_circuit () Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. Source code in quafu\\circuits\\quantum_circuit.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def layered_circuit ( self ): \"\"\" Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. \"\"\" num = self . num gatelist = self . gates gateQlist = [[] for i in range ( num )] used_qubits = [] for gate in gatelist : if isinstance ( gate , SingleQubitGate ): gateQlist [ gate . pos ] . append ( gate ) if gate . pos not in used_qubits : used_qubits . append ( gate . pos ) elif isinstance ( gate , Barrier ) or isinstance ( gate , TwoQubitGate ): pos1 = min ( gate . pos ) pos2 = max ( gate . pos ) gateQlist [ pos1 ] . append ( gate ) for j in range ( pos1 + 1 , pos2 + 1 ): gateQlist [ j ] . append ( None ) if isinstance ( gate , TwoQubitGate ): for pos in gate . pos : if pos not in used_qubits : used_qubits . append ( pos ) maxlayer = max ([ len ( gateQlist [ j ]) for j in range ( pos1 , pos2 + 1 )]) for j in range ( pos1 , pos2 + 1 ): layerj = len ( gateQlist [ j ]) pos = layerj - 1 if not layerj == maxlayer : for i in range ( abs ( layerj - maxlayer )): gateQlist [ j ] . insert ( pos , None ) maxdepth = max ([ len ( gateQlist [ i ]) for i in range ( num )]) for gates in gateQlist : gates . extend ([ None ] * ( maxdepth - len ( gates ))) for m in self . measures . keys (): if m not in used_qubits : used_qubits . append ( m ) used_qubits = np . sort ( used_qubits ) new_gateQlist = [] for old_qi in range ( len ( gateQlist )): gates = gateQlist [ old_qi ] if old_qi in used_qubits : new_gateQlist . append ( gates ) lc = np . array ( new_gateQlist ) lc = np . vstack (( used_qubits , lc . T )) . T self . circuit = lc self . used_qubits = list ( used_qubits ) return self . circuit measure ( pos , cbits = []) Measurement setting for experiment device. Parameters: Name Type Description Default pos int Qubits need measure. required cbits List [ int ] Classical bits keeping the measure results. [] Source code in quafu\\circuits\\quantum_circuit.py 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 def measure ( self , pos , cbits : List [ int ] = []): \"\"\" Measurement setting for experiment device. Args: pos (int): Qubits need measure. cbits (List[int]): Classical bits keeping the measure results. \"\"\" self . measures = dict ( zip ( pos , range ( len ( pos )))) if cbits : if len ( cbits ) == len ( self . measures ): self . measures = dict ( zip ( pos , cbits )) else : raise CircuitError ( \"Number of measured bits should equal to the number of classical bits\" ) rx ( pos , para ) Single qubit rotation Rx gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 331 332 333 334 335 336 337 338 339 340 341 def rx ( self , pos : int , para ): \"\"\" Single qubit rotation Rx gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RXGate ( pos , para )) return self ry ( pos , para ) Single qubit rotation Ry gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 343 344 345 346 347 348 349 350 351 352 353 def ry ( self , pos : int , para ): \"\"\" Single qubit rotation Ry gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RYGate ( pos , para )) return self rz ( pos , para ) Single qubit rotation Rz gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 355 356 357 358 359 360 361 362 363 364 365 def rz ( self , pos : int , para ): \"\"\" Single qubit rotation Rz gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RZGate ( pos , para )) return self swap ( q1 , q2 ) SWAP gate Parameters: Name Type Description Default q1 int qubit the gate act. required q2 int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 411 412 413 414 415 416 417 418 419 420 def swap ( self , q1 : int , q2 : int ): \"\"\" SWAP gate Args: q1 (int): qubit the gate act. q2 (int): qubit the gate act. \"\"\" self . gates . append ( SwapGate ([ q1 , q2 ])) return self to_openqasm () Convert the circuit to openqasm text. Returns: openqasm text. Source code in quafu\\circuits\\quantum_circuit.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def to_openqasm ( self ): \"\"\" Convert the circuit to openqasm text. Returns: openqasm text. \"\"\" qasm = '''OPENQASM 2.0; \\n include \"qelib1.inc\"; \\n ''' qasm += \"qreg q[ %d ]; \\n \" % self . num qasm += \"creg meas[ %d ]; \\n \" % len ( self . measures ) for gate in self . gates : if isinstance ( gate , FixedSingleQubitGate ): qasm += \" %s q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos ) elif isinstance ( gate , ParaSingleQubitGate ): qasm += \" %s ( %s ) q[ %d ]; \\n \" % ( gate . name . lower (), gate . paras , gate . pos ) elif isinstance ( gate , FixedTwoQubitGate ): qasm += \" %s q[ %d ],q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos [ 0 ], gate . pos [ 1 ]) elif type ( gate ) == Barrier : qasm += \"barrier \" + \",\" . join ([ \"q[ %d ]\" % p for p in gate . pos ]) + \"; \\n \" for key in self . measures : qasm += \"measure q[ %d ] -> meas[ %d ]; \\n \" % ( key , self . measures [ key ]) self . openqasm = qasm return qasm x ( pos ) X gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 301 302 303 304 305 306 307 308 309 def x ( self , pos : int ): \"\"\" X gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( XGate ( pos )) return self y ( pos ) Y gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 311 312 313 314 315 316 317 318 319 def y ( self , pos : int ): \"\"\" Y gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( YGate ( pos )) return self z ( pos ) Z gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 321 322 323 324 325 326 327 328 329 def z ( self , pos : int ): \"\"\" Z gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( ZGate ( pos )) return self SimuResult Bases: Result Class that save the execute simulation results returned from classical simulator. Attributes: Name Type Description num int) Numbers of measured qubits amplitudes ndarray Calculated amplitudes on each bitstring. rho ndarray Simulated density matrix of measured qubits Source code in quafu\\results\\results.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class SimuResult ( Result ): \"\"\" Class that save the execute simulation results returned from classical simulator. Attributes: num (int) : Numbers of measured qubits amplitudes (ndarray): Calculated amplitudes on each bitstring. rho (ndarray): Simulated density matrix of measured qubits \"\"\" def __init__ ( self , input_rho ): self . num = len ( input_rho . dims [ 0 ]) self . rho = np . array ( input_rho ) self . amplitudes = np . array ([]) if input_rho . type == 'ket' : self . amplitudes = np . abs ( np . array ( input_rho ) . ravel ()) ** 2 elif input_rho . type == 'oper' : self . amplitudes = np . abs ( np . diag ( input_rho )) ** 2 def plot_amplitudes ( self , full = True ): \"\"\" Plot the amplitudes from simulated results. Args: full (bool) : Whether plot on the full basis of measured qubits. \"\"\" from ..utils.basis import get_basis probs = self . amplitudes inds = range ( len ( probs )) if not full : inds = np . where ( self . amplitudes > 1e-14 )[ 0 ] probs = self . amplitudes [ inds ] plt . figure () plt . bar ( inds , probs , tick_label = [ bin ( i )[ 2 :] . zfill ( self . num ) for i in inds ]) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" ) plot_amplitudes ( full = True ) Plot the amplitudes from simulated results. Parameters: Name Type Description Default full bool) Whether plot on the full basis of measured qubits. True Source code in quafu\\results\\results.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def plot_amplitudes ( self , full = True ): \"\"\" Plot the amplitudes from simulated results. Args: full (bool) : Whether plot on the full basis of measured qubits. \"\"\" from ..utils.basis import get_basis probs = self . amplitudes inds = range ( len ( probs )) if not full : inds = np . where ( self . amplitudes > 1e-14 )[ 0 ] probs = self . amplitudes [ inds ] plt . figure () plt . bar ( inds , probs , tick_label = [ bin ( i )[ 2 :] . zfill ( self . num ) for i in inds ]) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" ) Task Bases: object Class for submitting quantum computation task to the backend. Attributes: Name Type Description token str) Apitoken that associate to your Quafu account. shots int Numbers of single shot measurement. compile bool Whether compile the circuit on the backend tomo bool Whether do tomography (Not support yet) Source code in quafu\\tasks\\tasks.pyclass Task ( object ): \"\"\" Class for submitting quantum computation task to the backend. Attributes: token (str) : Apitoken that associate to your Quafu account. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" def __init__ ( self ): self . _backend = ScQ_P10 () self . token = \"\" self . shots = 1000 self . tomo = False self . compile = True self . _url = \"\" def load_account ( self ): \"\"\" Load your Quafu account. \"\"\" homedir = get_homedir () file_dir = homedir + \"/.quafu/\" try : f = open ( file_dir + \"api\" , \"r\" ) data = f . readlines () self . token = data [ 0 ] . strip ( \" \\n \" ) self . _url = data [ 1 ] . strip ( \" \\n \" ) except : raise UserError ( \"User configure error. Please set up your token.\" ) def config ( self , backend = \"ScQ_P10\" , shots = 1000 , compile = True , tomo = False ): \"\"\" Configure the task properties Args: backend (str): Select the experimental backend. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" if backend == \"ScQ-P10\" : self . _backend = ScQ_P10 () elif backend == \"ScQ-P20\" : self . _backend = ScQ_P20 () elif backend == \"ScQ-P50\" : self . _backend = ScQ_P50 () self . shots = shots self . tomo = tomo self . compile = compile def get_backend_info ( self ): return self . _backend . get_info ( self . _url , self . token ) def submit ( self , qc , obslist = []): \"\"\" Execute the circuit with observable expectation measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. obslist (list[str, list[int]]): List of pauli string and its position. Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit.\\n 2) Measure 5-qubit Ising Hamiltonian we can use\\n obslist = [[\"X\", [i]] for i in range(5)]]\\n obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)])\\n For the energy expectation of Ising Hamiltonian \\n res, obsexp = q.submit_task(obslist)\\n E = sum(obsexp) \"\"\" # save input circuit inputs = qc . gates measures = list ( qc . measures . keys ()) if len ( obslist ) == 0 : print ( \"No observable measurement task.\" ) res = self . run ( qc ) return res , [] else : for obs in obslist : for p in obs [ 1 ]: if p not in measures : raise CircuitError ( \"Qubit %d in observer %s is not measured.\" % ( p , obs [ 0 ])) measure_basis , targlist = merge_measure ( obslist ) print ( \"Job start, need measured in \" , measure_basis ) exec_res = [] for measure_base in measure_basis : res = self . run ( qc , measure_base = measure_base ) qc . gates = inputs exec_res . append ( res ) measure_results = [] for obi in range ( len ( obslist )): obs = obslist [ obi ] rpos = [ measures . index ( p ) for p in obs [ 1 ]] measure_results . append ( exec_res [ targlist [ obi ]] . calculate_obs ( rpos )) return exec_res , measure_results def run ( self , qc , measure_base = []): \"\"\"Single run for measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. measure_base (list[str, list[int]]): measure base and it position. \"\"\" if len ( measure_base ) == 0 : res = self . send ( qc ) res . measure_base = '' else : for base , pos in zip ( measure_base [ 0 ], measure_base [ 1 ]): if base == \"X\" : qc . ry ( pos , - np . pi / 2 ) elif base == \"Y\" : qc . rx ( pos , np . pi / 2 ) res = self . send ( qc ) res . measure_base = measure_base return res def send ( self , qc ): \"\"\" Run the circuit on experimental device. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. Returns: ExecResult object that contain the dict return from quantum device. \"\"\" qc . to_openqasm () backends = { \"ScQ-P10\" : 0 , \"ScQ-P20\" : 1 , \"ScQ-P50\" : 2 } data = { \"qtasm\" : qc . openqasm , \"shots\" : self . shots , \"qubits\" : qc . num , \"scan\" : 0 , \"tomo\" : int ( self . tomo ), \"selected_server\" : backends [ self . _backend . name ], \"compile\" : int ( self . compile )} url = self . _url + \"qbackend/scq_kit/\" headers = { 'Content-Type' : 'application/x-www-form-urlencoded;charset=UTF-8' , 'api_token' : self . token } data = parse . urlencode ( data ) data = data . replace ( \"%27\" , \"'\" ) res = requests . post ( url , headers = headers , data = data ) res_dict = json . loads ( res . text ) if res . json ()[ \"status\" ] == 201 : raise UserError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5001 : raise CircuitError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5003 : raise ServerError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5004 : raise CompileError ( res_dict [ \"message\" ]) else : return ExecResult ( res_dict , qc . measures ) config ( backend = 'ScQ_P10' , shots = 1000 , compile = True , tomo = False ) Configure the task properties Parameters: Name Type Description Default backend str Select the experimental backend. 'ScQ_P10' shots int Numbers of single shot measurement. 1000 compile bool Whether compile the circuit on the backend True tomo bool Whether do tomography (Not support yet) False Source code in quafu\\tasks\\tasks.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def config ( self , backend = \"ScQ_P10\" , shots = 1000 , compile = True , tomo = False ): \"\"\" Configure the task properties Args: backend (str): Select the experimental backend. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" if backend == \"ScQ-P10\" : self . _backend = ScQ_P10 () elif backend == \"ScQ-P20\" : self . _backend = ScQ_P20 () elif backend == \"ScQ-P50\" : self . _backend = ScQ_P50 () self . shots = shots self . tomo = tomo self . compile = compile load_account () Load your Quafu account. Source code in quafu\\tasks\\tasks.py 30 31 32 33 34 35 36 37 38 39 40 41 42 def load_account ( self ): \"\"\" Load your Quafu account. \"\"\" homedir = get_homedir () file_dir = homedir + \"/.quafu/\" try : f = open ( file_dir + \"api\" , \"r\" ) data = f . readlines () self . token = data [ 0 ] . strip ( \" \\n \" ) self . _url = data [ 1 ] . strip ( \" \\n \" ) except : raise UserError ( \"User configure error. Please set up your token.\" ) run ( qc , measure_base = []) Single run for measurement task. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required measure_base list [ str , list [ int ]] measure base and it position. [] Source code in quafu\\tasks\\tasks.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def run ( self , qc , measure_base = []): \"\"\"Single run for measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. measure_base (list[str, list[int]]): measure base and it position. \"\"\" if len ( measure_base ) == 0 : res = self . send ( qc ) res . measure_base = '' else : for base , pos in zip ( measure_base [ 0 ], measure_base [ 1 ]): if base == \"X\" : qc . ry ( pos , - np . pi / 2 ) elif base == \"Y\" : qc . rx ( pos , np . pi / 2 ) res = self . send ( qc ) res . measure_base = measure_base return res send ( qc ) Run the circuit on experimental device. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required Returns: ExecResult object that contain the dict return from quantum device. Source code in quafu\\tasks\\tasks.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def send ( self , qc ): \"\"\" Run the circuit on experimental device. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. Returns: ExecResult object that contain the dict return from quantum device. \"\"\" qc . to_openqasm () backends = { \"ScQ-P10\" : 0 , \"ScQ-P20\" : 1 , \"ScQ-P50\" : 2 } data = { \"qtasm\" : qc . openqasm , \"shots\" : self . shots , \"qubits\" : qc . num , \"scan\" : 0 , \"tomo\" : int ( self . tomo ), \"selected_server\" : backends [ self . _backend . name ], \"compile\" : int ( self . compile )} url = self . _url + \"qbackend/scq_kit/\" headers = { 'Content-Type' : 'application/x-www-form-urlencoded;charset=UTF-8' , 'api_token' : self . token } data = parse . urlencode ( data ) data = data . replace ( \"%27\" , \"'\" ) res = requests . post ( url , headers = headers , data = data ) res_dict = json . loads ( res . text ) if res . json ()[ \"status\" ] == 201 : raise UserError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5001 : raise CircuitError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5003 : raise ServerError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5004 : raise CompileError ( res_dict [ \"message\" ]) else : return ExecResult ( res_dict , qc . measures ) submit ( qc , obslist = []) Execute the circuit with observable expectation measurement task. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required obslist list [ str , list [ int ]] List of pauli string and its position. [] Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit. 2) Measure 5-qubit Ising Hamiltonian we can use obslist = [[\"X\", [i]] for i in range(5)]] obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)]) For the energy expectation of Ising Hamiltonian res, obsexp = q.submit_task(obslist) E = sum(obsexp) Source code in quafu\\tasks\\tasks.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def submit ( self , qc , obslist = []): \"\"\" Execute the circuit with observable expectation measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. obslist (list[str, list[int]]): List of pauli string and its position. Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit.\\n 2) Measure 5-qubit Ising Hamiltonian we can use\\n obslist = [[\"X\", [i]] for i in range(5)]]\\n obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)])\\n For the energy expectation of Ising Hamiltonian \\n res, obsexp = q.submit_task(obslist)\\n E = sum(obsexp) \"\"\" # save input circuit inputs = qc . gates measures = list ( qc . measures . keys ()) if len ( obslist ) == 0 : print ( \"No observable measurement task.\" ) res = self . run ( qc ) return res , [] else : for obs in obslist : for p in obs [ 1 ]: if p not in measures : raise CircuitError ( \"Qubit %d in observer %s is not measured.\" % ( p , obs [ 0 ])) measure_basis , targlist = merge_measure ( obslist ) print ( \"Job start, need measured in \" , measure_basis ) exec_res = [] for measure_base in measure_basis : res = self . run ( qc , measure_base = measure_base ) qc . gates = inputs exec_res . append ( res ) measure_results = [] for obi in range ( len ( obslist )): obs = obslist [ obi ] rpos = [ measures . index ( p ) for p in obs [ 1 ]] measure_results . append ( exec_res [ targlist [ obi ]] . calculate_obs ( rpos )) return exec_res , measure_results User Bases: object Source code in quafu\\users\\userapi.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class User ( object ): def __init__ ( self ): self . apitoken = \"\" def save_apitoken ( self , apitoken ): \"\"\" Save your apitoken associate your Quafu account. \"\"\" self . apitoken = apitoken homedir = get_homedir () file_dir = homedir + \"/.quafu/\" if not os . path . exists ( file_dir ): os . mkdir ( file_dir ) with open ( file_dir + \"api\" , \"w\" ) as f : f . write ( self . apitoken + \" \\n \" ) f . write ( \"http://120.46.160.173/ \\n \" ) save_apitoken ( apitoken ) Save your apitoken associate your Quafu account. Source code in quafu\\users\\userapi.py 11 12 13 14 15 16 17 18 19 20 21 22 def save_apitoken ( self , apitoken ): \"\"\" Save your apitoken associate your Quafu account. \"\"\" self . apitoken = apitoken homedir = get_homedir () file_dir = homedir + \"/.quafu/\" if not os . path . exists ( file_dir ): os . mkdir ( file_dir ) with open ( file_dir + \"api\" , \"w\" ) as f : f . write ( self . apitoken + \" \\n \" ) f . write ( \"http://120.46.160.173/ \\n \" )","title":"Quafu document"},{"location":"#quafu-document","text":"","title":"Quafu document"},{"location":"#installation","text":"Run following codes in command line git clone https://github.com/ScQ-Cloud/quafu cd quafu python setup.py build python setup.py install","title":"Installation"},{"location":"#set-up-your-quafu-account","text":"To use the toolkit quafu, firstly you need to register on the Quafu website and get your apitoken <your API token> . If you already have an account, execute the follow code to set up your account. from quafu import User user = User() user.save_apitoken(<your API token>) You only need to save your token once and no longer need to execute above code when you use quafu after, except you want to change your account.","title":"Set up your Quafu account"},{"location":"#build-your-first-quantum-circuit","text":"Initialize a circuit with 5 qubits import numpy as np from quafu import QuantumCircuit q = QuantumCircuit(5) Add quantum gates. For quantum gates Quafu supports, please check the API reference for QuantumCircuit q.x(0) q.x(1) q.cnot(2, 1) q.ry(1, np.pi/2) q.rx(2, np.pi) q.rz(3, 0.1) q.cz(2, 3) <quafu.circuits.quantum_circuit.QuantumCircuit at 0x23a358ae850> Add measurement information including qubits measured ( measures ) and the classical bits keeping the measured results ( cbits ). If there is no measurement information provided, all qubits are measured by default. measures = [0, 1, 2, 3] cbits = [0, 1, 2, 3] q.measure(measures, cbits=cbits) You can draw the circuit using the draw_circuit method q.draw_circuit() q[0] -----X-------------------------- M->c[0] q[1] -----X-------+---RY(1.571)------ M->c[1] | q[2] -------------*---RX(3.142)---*-- M->c[2] CZ q[3] -RZ(0.100)-------------------+-- M->c[3] You can also initial your quantum circuit with openqasm text. QuantumCircuit class provides the from_openqasm method for initializing quantum circuit directly from openqasm. qc = QuantumCircuit(4) test_ghz = \"\"\"OPENQASM 2.0; include \"qelib1.inc\"; qreg q[4]; h q[0]; cx q[0],q[1]; cx q[0],q[2]; cx q[0],q[3]; \"\"\" qc.from_openqasm(test_ghz) qc.draw_circuit() q[0] -H---*----*----*-- M->c[0] | | | q[1] -----+----|----|-- M->c[1] | | q[2] ----------+----|-- M->c[2] | q[3] ---------------+-- M->c[3]","title":"Build your first quantum circuit"},{"location":"#submit-your-circuit","text":"Now you are ready to submit the circuit to the experimental backend. First initial a Task object and load your account. from quafu import Task task = Task() task.load_account() You can configure your task properties using the config method. Here we choose the backend ( backend ) as ScQ-P10 , the single shots number ( shots ) as 2000 and to compile the circuit on backend ( compile ). task.config(backend=\"ScQ-P10\", shots=2000, compile=True) If you set the compile parameter to False , make sure that you know the topology of the backend well and submit valid circuit. Send the quantum circuit to the backend. Here we send circuit q . res = task.send(q) You can use the returned results to check the count and amplitude on each measured bit string. The output bits are arranged as 0, 1, 2,... from left to the right. print(res.counts) #counts print(res.amplitudes) #amplitude res.plot_amplitudes() OrderedDict([('0010', 22), ('0011', 2), ('0110', 20), ('1000', 30), ('1001', 2), ('1010', 837), ('1011', 156), ('1100', 44), ('1110', 734), ('1111', 153)]) {'0010': 0.011, '0011': 0.001, '0110': 0.01, '1000': 0.015, '1001': 0.001, '1010': 0.4185, '1011': 0.078, '1100': 0.022, '1110': 0.367, '1111': 0.0765} If you want to check the correctness the execute results. Quafu provide simple circuit similator based on the qutip pacakge. from quafu.simulators.qutip_simulator import simulate simu_res = simulate(q) simu_res.plot_amplitudes(full=True) You can also submit the 4-bit ghz circuit qc built from openqasm. res = task.send(qc) res.plot_amplitudes() simu_res = simulate(qc) simu_res.plot_amplitudes() If you don't want to plot the results for basis with zero amplitudes, set the parameter full in method plot_amplitudes to False. Note that this parameter is only valid for results returned by simulator.","title":"Submit your circuit"},{"location":"#submit-circuit-and-measure-observables","text":"Quafu provides measuring observables with an excuted quantum circuit. You can input Pauli operators that need to measure expectation values to the submit method. For example, you can input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] to calcuate the expectation of operators \\sigma^x_0\\sigma^y_1\\sigma^x_2 and \\sigma^z_1 . The submit method will minimize the executing times of the circuit with different measurement basis that can calculate all expectations of input operators. Here we show how to measure the energy expection of the Ising chain H=\\sum_i \\sigma^z_i \\sigma^z_{i+1} + g \\sum_i \\sigma^x_i. First we initialize a circuit with three Hadamard gate q = QuantumCircuit(5) for i in range(5): if i % 2 == 0: q.h(i) q.draw_circuit() measures = list(range(5)) q.measure(measures) q[0] -H- M->c[0] q[1] --- M->c[1] q[2] -H- M->c[2] q[3] --- M->c[3] q[4] -H- M->c[4] Next we set operators that need to be measured to calculate the energy expectation, and submit the circuit using submit method test_Ising = [[\"X\", [i]] for i in range(5)] test_Ising.extend([[\"ZZ\", [i, i+1]] for i in range(4)]) res, obsexp = task.submit(q, test_Ising) Job start, need measured in [['XXXXX', [0, 1, 2, 3, 4]], ['ZZZZZ', [0, 1, 2, 3, 4]]] The function return measurement results and operator expectations. The measurement results only contain two ExecResult object since the circuit is only executed twice, with measurement basis [['XXXXX', [0, 1, 2, 3, 4]] and ['ZZZZZ', [0, 1, 2, 3, 4]]] respectively. res[0].plot_amplitudes() res[1].plot_amplitudes() The return operator expectations ( obsexp ) is a list with a length equal to the input operator number. We can use it to calculate the energy expectation print(obsexp) g = 0.5 E = g*sum(obsexp[:5])+sum(obsexp[5:]) print(E) [0.9930000000000001, -0.018000000000000016, 1.001, 0.03200000000000003, 1.001, 0.007000000000000006, 0.007000000000000006, -0.05800000000000005, -0.05800000000000005] 1.4024999999999999","title":"Submit circuit and measure observables"},{"location":"#api-reference","text":"","title":"API Reference"},{"location":"#quafu.ExecResult","text":"Bases: Result Class that save the execute results returned from backend. Attributes: Name Type Description counts dict Samples counts on each bitstring. amplitudes dict Calculated amplitudes on each bitstring. taskid int Unique task id for the execute result. transpiled_circuit QuantumCircuit Quantum circuit transpiled on backend. Source code in quafu\\results\\results.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class ExecResult ( Result ): \"\"\" Class that save the execute results returned from backend. Attributes: counts (dict): Samples counts on each bitstring. amplitudes (dict): Calculated amplitudes on each bitstring. taskid (int): Unique task id for the execute result. transpiled_circuit (QuantumCircuit): Quantum circuit transpiled on backend. \"\"\" def __init__ ( self , input_dict , measures ): self . measures = measures self . res = eval ( input_dict [ 'res' ]) self . counts = OrderedDict ( sorted ( self . res . items (), key = lambda s : s [ 0 ])) self . logicalq_res = {} cbits = list ( self . measures . values ()) for key , values in self . counts . items (): newkey = \"\" . join ([ key [ i ] for i in cbits ]) self . logicalq_res [ newkey ] = values self . taskid = input_dict [ 'task_id' ] self . transpiled_openqasm = input_dict [ \"openqasm\" ] from ..circuits.quantum_circuit import QuantumCircuit self . transpiled_circuit = QuantumCircuit ( 0 ) self . transpiled_circuit . from_openqasm ( self . transpiled_openqasm ) self . measure_base = [] total_counts = sum ( self . counts . values ()) self . amplitudes = {} for key in self . counts : self . amplitudes [ key ] = self . counts [ key ] / total_counts def calculate_obs ( self , pos ): \"\"\" Calculate observables on input position Args: pos (list[int]): Positions of observalbes. \"\"\" return measure_obs ( pos , self . logicalq_res ) def plot_amplitudes ( self ): \"\"\" Plot the amplitudes from execute results. \"\"\" bitstrs = list ( self . amplitudes . keys ()) amps = list ( self . amplitudes . values ()) plt . figure () plt . bar ( range ( len ( amps )), amps , tick_label = bitstrs ) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" )","title":"ExecResult"},{"location":"#quafu.results.results.ExecResult.calculate_obs","text":"Calculate observables on input position Args: pos (list[int]): Positions of observalbes. Source code in quafu\\results\\results.py 45 46 47 48 49 50 51 def calculate_obs ( self , pos ): \"\"\" Calculate observables on input position Args: pos (list[int]): Positions of observalbes. \"\"\" return measure_obs ( pos , self . logicalq_res )","title":"calculate_obs()"},{"location":"#quafu.results.results.ExecResult.plot_amplitudes","text":"Plot the amplitudes from execute results. Source code in quafu\\results\\results.py 53 54 55 56 57 58 59 60 61 62 def plot_amplitudes ( self ): \"\"\" Plot the amplitudes from execute results. \"\"\" bitstrs = list ( self . amplitudes . keys ()) amps = list ( self . amplitudes . values ()) plt . figure () plt . bar ( range ( len ( amps )), amps , tick_label = bitstrs ) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" )","title":"plot_amplitudes()"},{"location":"#quafu.QuantumCircuit","text":"Bases: object Source code in quafu\\circuits\\quantum_circuit.pyclass QuantumCircuit ( object ): def __init__ ( self , num ): \"\"\" Initialize a QuantumCircuit object Args: num (int): Total qubit number used \"\"\" self . num = num self . gates = [] self . openqasm = \"\" self . circuit = [] self . measures = dict ( zip ( range ( num ), range ( num ))) self . used_qubits = [] def get_used_qubits ( self ): self . layered_circuit () return self . used_qubits def layered_circuit ( self ): \"\"\" Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. \"\"\" num = self . num gatelist = self . gates gateQlist = [[] for i in range ( num )] used_qubits = [] for gate in gatelist : if isinstance ( gate , SingleQubitGate ): gateQlist [ gate . pos ] . append ( gate ) if gate . pos not in used_qubits : used_qubits . append ( gate . pos ) elif isinstance ( gate , Barrier ) or isinstance ( gate , TwoQubitGate ): pos1 = min ( gate . pos ) pos2 = max ( gate . pos ) gateQlist [ pos1 ] . append ( gate ) for j in range ( pos1 + 1 , pos2 + 1 ): gateQlist [ j ] . append ( None ) if isinstance ( gate , TwoQubitGate ): for pos in gate . pos : if pos not in used_qubits : used_qubits . append ( pos ) maxlayer = max ([ len ( gateQlist [ j ]) for j in range ( pos1 , pos2 + 1 )]) for j in range ( pos1 , pos2 + 1 ): layerj = len ( gateQlist [ j ]) pos = layerj - 1 if not layerj == maxlayer : for i in range ( abs ( layerj - maxlayer )): gateQlist [ j ] . insert ( pos , None ) maxdepth = max ([ len ( gateQlist [ i ]) for i in range ( num )]) for gates in gateQlist : gates . extend ([ None ] * ( maxdepth - len ( gates ))) for m in self . measures . keys (): if m not in used_qubits : used_qubits . append ( m ) used_qubits = np . sort ( used_qubits ) new_gateQlist = [] for old_qi in range ( len ( gateQlist )): gates = gateQlist [ old_qi ] if old_qi in used_qubits : new_gateQlist . append ( gates ) lc = np . array ( new_gateQlist ) lc = np . vstack (( used_qubits , lc . T )) . T self . circuit = lc self . used_qubits = list ( used_qubits ) return self . circuit def draw_circuit ( self ): \"\"\" Draw layered circuit using ASCII, print in terminal. \"\"\" self . layered_circuit () gateQlist = self . circuit num = gateQlist . shape [ 0 ] depth = gateQlist . shape [ 1 ] - 1 printlist = np . array ([[ \"\" ] * depth for i in range ( 2 * num )], dtype = \"<U30\" ) reduce_map = dict ( zip ( gateQlist [:, 0 ], range ( num ))) reduce_map_inv = dict ( zip ( range ( num ), gateQlist [:, 0 ])) for l in range ( depth ): layergates = gateQlist [:, l + 1 ] maxlen = 3 for i in range ( num ): gate = layergates [ i ] if isinstance ( gate , FixedSingleQubitGate ): printlist [ i * 2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaSingleQubitGate ): gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ i * 2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , FixedTwoQubitGate ): q1 = reduce_map [ min ( gate . pos )] q2 = reduce_map [ max ( gate . pos )] printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" if isinstance ( gate , ControlGate ): printlist [ reduce_map [ gate . ctrl ] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . targ ] * 2 , l ] = \"+\" maxlen = max ( maxlen , 5 ) if gate . name not in [ \"CNOT\" , \"CX\" ]: printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) else : if gate . name == \"SWAP\" : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"*\" else : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaTwoQubitGate ): q1 = reduce_map ( min ( gate . pos )) q2 = reduce_map ( max ( gate . pos )) printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" gatestr = \"\" if isinstance ( gate . paras , Iterable ): gatestr = ( \" %s (\" % gate . name + \",\" . join ( [ \" %.3f \" % para for para in gate . paras ]) + \")\" ) else : gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ q1 + q2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , Barrier ): pos = [ i for i in gate . pos if i in reduce_map . keys ()] q1 = reduce_map [ min ( pos )] q2 = reduce_map [ max ( pos )] printlist [ 2 * q1 : 2 * q2 + 1 , l ] = \"||\" maxlen = max ( maxlen , len ( \"||\" )) printlist [ - 1 , l ] = maxlen circuitstr = [] for j in range ( 2 * num - 1 ): if j % 2 == 0 : linestr = ( \"q[ %d ]\" % ( reduce_map_inv [ j // 2 ])) . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \"-\" ) for l in range ( depth )]) if reduce_map_inv [ j // 2 ] in self . measures . keys (): linestr += \" M->c[ %d ]\" % self . measures [ reduce_map_inv [ j // 2 ]] circuitstr . append ( linestr ) else : circuitstr . append ( \"\" . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \" \" ) for l in range ( depth )])) circuitstr = \" \\n \" . join ( circuitstr ) print ( circuitstr ) def from_openqasm ( self , openqasm ): \"\"\" Initialize the circuit from openqasm text. \"\"\" from numpy import pi import re self . openqasm = openqasm lines = self . openqasm . splitlines () self . gates = [] self . measures = {} measured_qubits = [] global_valid = True for line in lines [ 2 :]: if line : operations_qbs = line . split ( \" \" , 1 ) operations = operations_qbs [ 0 ] if operations == \"qreg\" : qbs = operations_qbs [ 1 ] self . num = int ( re . findall ( \"\\d+\" , qbs )[ 0 ]) elif operations == \"creg\" : pass elif operations == \"measure\" : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] mb = inds [ 0 ] cb = inds [ 1 ] self . measures [ mb ] = cb measured_qubits . append ( mb ) else : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] valid = True for pos in inds : if pos in measured_qubits : valid = False global_valid = False break if valid : if operations == \"barrier\" : self . barrier ( inds ) else : sp_op = operations . split ( \"(\" ) gatename = sp_op [ 0 ] if len ( sp_op ) > 1 : paras = sp_op [ 1 ] . strip ( \"()\" ) parastr = paras . split ( \",\" ) paras = [ eval ( parai , { \"pi\" : pi }) for parai in parastr ] if gatename == \"cx\" : self . cnot ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cy\" : self . cy ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cz\" : self . cz ( inds [ 0 ], inds [ 1 ]) elif gatename == \"swap\" : self . swap ( inds [ 0 ], inds [ 1 ]) elif gatename == \"rx\" : self . rx ( inds [ 0 ], paras [ 0 ]) elif gatename == \"ry\" : self . ry ( inds [ 0 ], paras [ 0 ]) elif gatename == \"rz\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"x\" : self . x ( inds [ 0 ]) elif gatename == \"y\" : self . y ( inds [ 0 ]) elif gatename == \"z\" : self . z ( inds [ 0 ]) elif gatename == \"h\" : self . h ( inds [ 0 ]) elif gatename == \"u1\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u2\" : self . rz ( inds [ 0 ], paras [ 1 ]) self . ry ( inds [ 0 ], pi / 2 ) self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u3\" : self . rz ( inds [ 0 ], paras [ 2 ]) self . ry ( inds [ 0 ], paras [ 0 ]) self . rz ( inds [ 0 ], paras [ 1 ]) else : print ( \"Warning: Operations %s may be not supported by QuantumCircuit class currently.\" % gatename ) if not self . measures : self . measures = dict ( zip ( range ( self . num ), range ( self . num ))) if not global_valid : print ( \"Warning: All operations after measurement will be removed for executing on experiment\" ) def to_openqasm ( self ): \"\"\" Convert the circuit to openqasm text. Returns: openqasm text. \"\"\" qasm = '''OPENQASM 2.0; \\n include \"qelib1.inc\"; \\n ''' qasm += \"qreg q[ %d ]; \\n \" % self . num qasm += \"creg meas[ %d ]; \\n \" % len ( self . measures ) for gate in self . gates : if isinstance ( gate , FixedSingleQubitGate ): qasm += \" %s q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos ) elif isinstance ( gate , ParaSingleQubitGate ): qasm += \" %s ( %s ) q[ %d ]; \\n \" % ( gate . name . lower (), gate . paras , gate . pos ) elif isinstance ( gate , FixedTwoQubitGate ): qasm += \" %s q[ %d ],q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos [ 0 ], gate . pos [ 1 ]) elif type ( gate ) == Barrier : qasm += \"barrier \" + \",\" . join ([ \"q[ %d ]\" % p for p in gate . pos ]) + \"; \\n \" for key in self . measures : qasm += \"measure q[ %d ] -> meas[ %d ]; \\n \" % ( key , self . measures [ key ]) self . openqasm = qasm return qasm def h ( self , pos : int ): \"\"\" Hadamard gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( HGate ( pos )) return self def x ( self , pos : int ): \"\"\" X gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( XGate ( pos )) return self def y ( self , pos : int ): \"\"\" Y gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( YGate ( pos )) return self def z ( self , pos : int ): \"\"\" Z gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( ZGate ( pos )) return self def rx ( self , pos : int , para ): \"\"\" Single qubit rotation Rx gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RXGate ( pos , para )) return self def ry ( self , pos : int , para ): \"\"\" Single qubit rotation Ry gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RYGate ( pos , para )) return self def rz ( self , pos : int , para ): \"\"\" Single qubit rotation Rz gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RZGate ( pos , para )) return self def cnot ( self , ctrl : int , tar : int ): \"\"\" CNOT gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CXGate ([ ctrl , tar ])) return self def cy ( self , ctrl : int , tar : int ): \"\"\" CY gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CYGate ([ ctrl , tar ])) return self def cz ( self , ctrl : int , tar : int ): \"\"\" CZ gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CZGate ([ ctrl , tar ])) return self # def fsim(self, q1, q2, theta, phi): # \"\"\" # fSim gate. # Args: # q1, q2 (int): qubits the gate act. # theta (float): parameter theta in fSim. # phi (float): parameter phi in fSim. # \"\"\" # self.gates.append(FsimGate([q1, q2], [theta, phi])) def swap ( self , q1 : int , q2 : int ): \"\"\" SWAP gate Args: q1 (int): qubit the gate act. q2 (int): qubit the gate act. \"\"\" self . gates . append ( SwapGate ([ q1 , q2 ])) return self def barrier ( self , qlist : List [ int ]): \"\"\" Add barrier for qubits in qlist. Args: qlist (list[int]): A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). \"\"\" self . gates . append ( Barrier ( qlist )) return self def measure ( self , pos , cbits : List [ int ] = []): \"\"\" Measurement setting for experiment device. Args: pos (int): Qubits need measure. cbits (List[int]): Classical bits keeping the measure results. \"\"\" self . measures = dict ( zip ( pos , range ( len ( pos )))) if cbits : if len ( cbits ) == len ( self . measures ): self . measures = dict ( zip ( pos , cbits )) else : raise CircuitError ( \"Number of measured bits should equal to the number of classical bits\" )","title":"QuantumCircuit"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.__init__","text":"Initialize a QuantumCircuit object Parameters: Name Type Description Default num int Total qubit number used required Source code in quafu\\circuits\\quantum_circuit.py 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , num ): \"\"\" Initialize a QuantumCircuit object Args: num (int): Total qubit number used \"\"\" self . num = num self . gates = [] self . openqasm = \"\" self . circuit = [] self . measures = dict ( zip ( range ( num ), range ( num ))) self . used_qubits = []","title":"__init__()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.barrier","text":"Add barrier for qubits in qlist. Parameters: Name Type Description Default qlist list [ int ] A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). required Source code in quafu\\circuits\\quantum_circuit.py 422 423 424 425 426 427 428 429 430 def barrier ( self , qlist : List [ int ]): \"\"\" Add barrier for qubits in qlist. Args: qlist (list[int]): A list contain the qubit need add barrier. When qlist contain at least two qubit, the barrier will be added from minimum qubit to maximum qubit. For example: barrier([0, 2]) create barrier for qubits 0, 1, 2. To create discrete barrier, using barrier([0]), barrier([2]). \"\"\" self . gates . append ( Barrier ( qlist )) return self","title":"barrier()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.cnot","text":"CNOT gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 367 368 369 370 371 372 373 374 375 376 def cnot ( self , ctrl : int , tar : int ): \"\"\" CNOT gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CXGate ([ ctrl , tar ])) return self","title":"cnot()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.cy","text":"CY gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 378 379 380 381 382 383 384 385 386 387 def cy ( self , ctrl : int , tar : int ): \"\"\" CY gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CYGate ([ ctrl , tar ])) return self","title":"cy()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.cz","text":"CZ gate. Parameters: Name Type Description Default ctrl int control qubit. required tar int target qubit. required Source code in quafu\\circuits\\quantum_circuit.py 389 390 391 392 393 394 395 396 397 398 def cz ( self , ctrl : int , tar : int ): \"\"\" CZ gate. Args: ctrl (int): control qubit. tar (int): target qubit. \"\"\" self . gates . append ( CZGate ([ ctrl , tar ])) return self","title":"cz()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.draw_circuit","text":"Draw layered circuit using ASCII, print in terminal. Source code in quafu\\circuits\\quantum_circuit.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 def draw_circuit ( self ): \"\"\" Draw layered circuit using ASCII, print in terminal. \"\"\" self . layered_circuit () gateQlist = self . circuit num = gateQlist . shape [ 0 ] depth = gateQlist . shape [ 1 ] - 1 printlist = np . array ([[ \"\" ] * depth for i in range ( 2 * num )], dtype = \"<U30\" ) reduce_map = dict ( zip ( gateQlist [:, 0 ], range ( num ))) reduce_map_inv = dict ( zip ( range ( num ), gateQlist [:, 0 ])) for l in range ( depth ): layergates = gateQlist [:, l + 1 ] maxlen = 3 for i in range ( num ): gate = layergates [ i ] if isinstance ( gate , FixedSingleQubitGate ): printlist [ i * 2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaSingleQubitGate ): gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ i * 2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , FixedTwoQubitGate ): q1 = reduce_map [ min ( gate . pos )] q2 = reduce_map [ max ( gate . pos )] printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" if isinstance ( gate , ControlGate ): printlist [ reduce_map [ gate . ctrl ] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . targ ] * 2 , l ] = \"+\" maxlen = max ( maxlen , 5 ) if gate . name not in [ \"CNOT\" , \"CX\" ]: printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) else : if gate . name == \"SWAP\" : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"*\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"*\" else : printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" printlist [ q1 + q2 , l ] = gate . name maxlen = max ( maxlen , len ( gate . name ) + 2 ) elif isinstance ( gate , ParaTwoQubitGate ): q1 = reduce_map ( min ( gate . pos )) q2 = reduce_map ( max ( gate . pos )) printlist [ 2 * q1 + 1 : 2 * q2 , l ] = \"|\" printlist [ reduce_map [ gate . pos [ 0 ]] * 2 , l ] = \"#\" printlist [ reduce_map [ gate . pos [ 1 ]] * 2 , l ] = \"#\" gatestr = \"\" if isinstance ( gate . paras , Iterable ): gatestr = ( \" %s (\" % gate . name + \",\" . join ( [ \" %.3f \" % para for para in gate . paras ]) + \")\" ) else : gatestr = \" %s ( %.3f )\" % ( gate . name , gate . paras ) printlist [ q1 + q2 , l ] = gatestr maxlen = max ( maxlen , len ( gatestr ) + 2 ) elif isinstance ( gate , Barrier ): pos = [ i for i in gate . pos if i in reduce_map . keys ()] q1 = reduce_map [ min ( pos )] q2 = reduce_map [ max ( pos )] printlist [ 2 * q1 : 2 * q2 + 1 , l ] = \"||\" maxlen = max ( maxlen , len ( \"||\" )) printlist [ - 1 , l ] = maxlen circuitstr = [] for j in range ( 2 * num - 1 ): if j % 2 == 0 : linestr = ( \"q[ %d ]\" % ( reduce_map_inv [ j // 2 ])) . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \"-\" ) for l in range ( depth )]) if reduce_map_inv [ j // 2 ] in self . measures . keys (): linestr += \" M->c[ %d ]\" % self . measures [ reduce_map_inv [ j // 2 ]] circuitstr . append ( linestr ) else : circuitstr . append ( \"\" . ljust ( 6 ) + \"\" . join ( [ printlist [ j , l ] . center ( int ( printlist [ - 1 , l ]), \" \" ) for l in range ( depth )])) circuitstr = \" \\n \" . join ( circuitstr ) print ( circuitstr )","title":"draw_circuit()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.from_openqasm","text":"Initialize the circuit from openqasm text. Source code in quafu\\circuits\\quantum_circuit.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 def from_openqasm ( self , openqasm ): \"\"\" Initialize the circuit from openqasm text. \"\"\" from numpy import pi import re self . openqasm = openqasm lines = self . openqasm . splitlines () self . gates = [] self . measures = {} measured_qubits = [] global_valid = True for line in lines [ 2 :]: if line : operations_qbs = line . split ( \" \" , 1 ) operations = operations_qbs [ 0 ] if operations == \"qreg\" : qbs = operations_qbs [ 1 ] self . num = int ( re . findall ( \"\\d+\" , qbs )[ 0 ]) elif operations == \"creg\" : pass elif operations == \"measure\" : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] mb = inds [ 0 ] cb = inds [ 1 ] self . measures [ mb ] = cb measured_qubits . append ( mb ) else : qbs = operations_qbs [ 1 ] indstr = re . findall ( \"\\d+\" , qbs ) inds = [ int ( indst ) for indst in indstr ] valid = True for pos in inds : if pos in measured_qubits : valid = False global_valid = False break if valid : if operations == \"barrier\" : self . barrier ( inds ) else : sp_op = operations . split ( \"(\" ) gatename = sp_op [ 0 ] if len ( sp_op ) > 1 : paras = sp_op [ 1 ] . strip ( \"()\" ) parastr = paras . split ( \",\" ) paras = [ eval ( parai , { \"pi\" : pi }) for parai in parastr ] if gatename == \"cx\" : self . cnot ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cy\" : self . cy ( inds [ 0 ], inds [ 1 ]) elif gatename == \"cz\" : self . cz ( inds [ 0 ], inds [ 1 ]) elif gatename == \"swap\" : self . swap ( inds [ 0 ], inds [ 1 ]) elif gatename == \"rx\" : self . rx ( inds [ 0 ], paras [ 0 ]) elif gatename == \"ry\" : self . ry ( inds [ 0 ], paras [ 0 ]) elif gatename == \"rz\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"x\" : self . x ( inds [ 0 ]) elif gatename == \"y\" : self . y ( inds [ 0 ]) elif gatename == \"z\" : self . z ( inds [ 0 ]) elif gatename == \"h\" : self . h ( inds [ 0 ]) elif gatename == \"u1\" : self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u2\" : self . rz ( inds [ 0 ], paras [ 1 ]) self . ry ( inds [ 0 ], pi / 2 ) self . rz ( inds [ 0 ], paras [ 0 ]) elif gatename == \"u3\" : self . rz ( inds [ 0 ], paras [ 2 ]) self . ry ( inds [ 0 ], paras [ 0 ]) self . rz ( inds [ 0 ], paras [ 1 ]) else : print ( \"Warning: Operations %s may be not supported by QuantumCircuit class currently.\" % gatename ) if not self . measures : self . measures = dict ( zip ( range ( self . num ), range ( self . num ))) if not global_valid : print ( \"Warning: All operations after measurement will be removed for executing on experiment\" )","title":"from_openqasm()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.h","text":"Hadamard gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 291 292 293 294 295 296 297 298 299 def h ( self , pos : int ): \"\"\" Hadamard gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( HGate ( pos )) return self","title":"h()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.layered_circuit","text":"Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. Source code in quafu\\circuits\\quantum_circuit.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def layered_circuit ( self ): \"\"\" Make layered circuit from the gate sequence self.gates. Returns: A layered list with left justed circuit. \"\"\" num = self . num gatelist = self . gates gateQlist = [[] for i in range ( num )] used_qubits = [] for gate in gatelist : if isinstance ( gate , SingleQubitGate ): gateQlist [ gate . pos ] . append ( gate ) if gate . pos not in used_qubits : used_qubits . append ( gate . pos ) elif isinstance ( gate , Barrier ) or isinstance ( gate , TwoQubitGate ): pos1 = min ( gate . pos ) pos2 = max ( gate . pos ) gateQlist [ pos1 ] . append ( gate ) for j in range ( pos1 + 1 , pos2 + 1 ): gateQlist [ j ] . append ( None ) if isinstance ( gate , TwoQubitGate ): for pos in gate . pos : if pos not in used_qubits : used_qubits . append ( pos ) maxlayer = max ([ len ( gateQlist [ j ]) for j in range ( pos1 , pos2 + 1 )]) for j in range ( pos1 , pos2 + 1 ): layerj = len ( gateQlist [ j ]) pos = layerj - 1 if not layerj == maxlayer : for i in range ( abs ( layerj - maxlayer )): gateQlist [ j ] . insert ( pos , None ) maxdepth = max ([ len ( gateQlist [ i ]) for i in range ( num )]) for gates in gateQlist : gates . extend ([ None ] * ( maxdepth - len ( gates ))) for m in self . measures . keys (): if m not in used_qubits : used_qubits . append ( m ) used_qubits = np . sort ( used_qubits ) new_gateQlist = [] for old_qi in range ( len ( gateQlist )): gates = gateQlist [ old_qi ] if old_qi in used_qubits : new_gateQlist . append ( gates ) lc = np . array ( new_gateQlist ) lc = np . vstack (( used_qubits , lc . T )) . T self . circuit = lc self . used_qubits = list ( used_qubits ) return self . circuit","title":"layered_circuit()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.measure","text":"Measurement setting for experiment device. Parameters: Name Type Description Default pos int Qubits need measure. required cbits List [ int ] Classical bits keeping the measure results. [] Source code in quafu\\circuits\\quantum_circuit.py 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 def measure ( self , pos , cbits : List [ int ] = []): \"\"\" Measurement setting for experiment device. Args: pos (int): Qubits need measure. cbits (List[int]): Classical bits keeping the measure results. \"\"\" self . measures = dict ( zip ( pos , range ( len ( pos )))) if cbits : if len ( cbits ) == len ( self . measures ): self . measures = dict ( zip ( pos , cbits )) else : raise CircuitError ( \"Number of measured bits should equal to the number of classical bits\" )","title":"measure()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.rx","text":"Single qubit rotation Rx gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 331 332 333 334 335 336 337 338 339 340 341 def rx ( self , pos : int , para ): \"\"\" Single qubit rotation Rx gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RXGate ( pos , para )) return self","title":"rx()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.ry","text":"Single qubit rotation Ry gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 343 344 345 346 347 348 349 350 351 352 353 def ry ( self , pos : int , para ): \"\"\" Single qubit rotation Ry gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RYGate ( pos , para )) return self","title":"ry()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.rz","text":"Single qubit rotation Rz gate. Parameters: Name Type Description Default pos int qubit the gate act. required para float rotation angle required Source code in quafu\\circuits\\quantum_circuit.py 355 356 357 358 359 360 361 362 363 364 365 def rz ( self , pos : int , para ): \"\"\" Single qubit rotation Rz gate. Args: pos (int): qubit the gate act. para (float): rotation angle \"\"\" if para != 0. : self . gates . append ( RZGate ( pos , para )) return self","title":"rz()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.swap","text":"SWAP gate Parameters: Name Type Description Default q1 int qubit the gate act. required q2 int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 411 412 413 414 415 416 417 418 419 420 def swap ( self , q1 : int , q2 : int ): \"\"\" SWAP gate Args: q1 (int): qubit the gate act. q2 (int): qubit the gate act. \"\"\" self . gates . append ( SwapGate ([ q1 , q2 ])) return self","title":"swap()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.to_openqasm","text":"Convert the circuit to openqasm text. Returns: openqasm text. Source code in quafu\\circuits\\quantum_circuit.py 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 def to_openqasm ( self ): \"\"\" Convert the circuit to openqasm text. Returns: openqasm text. \"\"\" qasm = '''OPENQASM 2.0; \\n include \"qelib1.inc\"; \\n ''' qasm += \"qreg q[ %d ]; \\n \" % self . num qasm += \"creg meas[ %d ]; \\n \" % len ( self . measures ) for gate in self . gates : if isinstance ( gate , FixedSingleQubitGate ): qasm += \" %s q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos ) elif isinstance ( gate , ParaSingleQubitGate ): qasm += \" %s ( %s ) q[ %d ]; \\n \" % ( gate . name . lower (), gate . paras , gate . pos ) elif isinstance ( gate , FixedTwoQubitGate ): qasm += \" %s q[ %d ],q[ %d ]; \\n \" % ( gate . name . lower (), gate . pos [ 0 ], gate . pos [ 1 ]) elif type ( gate ) == Barrier : qasm += \"barrier \" + \",\" . join ([ \"q[ %d ]\" % p for p in gate . pos ]) + \"; \\n \" for key in self . measures : qasm += \"measure q[ %d ] -> meas[ %d ]; \\n \" % ( key , self . measures [ key ]) self . openqasm = qasm return qasm","title":"to_openqasm()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.x","text":"X gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 301 302 303 304 305 306 307 308 309 def x ( self , pos : int ): \"\"\" X gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( XGate ( pos )) return self","title":"x()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.y","text":"Y gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 311 312 313 314 315 316 317 318 319 def y ( self , pos : int ): \"\"\" Y gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( YGate ( pos )) return self","title":"y()"},{"location":"#quafu.circuits.quantum_circuit.QuantumCircuit.z","text":"Z gate. Parameters: Name Type Description Default pos int qubit the gate act. required Source code in quafu\\circuits\\quantum_circuit.py 321 322 323 324 325 326 327 328 329 def z ( self , pos : int ): \"\"\" Z gate. Args: pos (int): qubit the gate act. \"\"\" self . gates . append ( ZGate ( pos )) return self","title":"z()"},{"location":"#quafu.SimuResult","text":"Bases: Result Class that save the execute simulation results returned from classical simulator. Attributes: Name Type Description num int) Numbers of measured qubits amplitudes ndarray Calculated amplitudes on each bitstring. rho ndarray Simulated density matrix of measured qubits Source code in quafu\\results\\results.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class SimuResult ( Result ): \"\"\" Class that save the execute simulation results returned from classical simulator. Attributes: num (int) : Numbers of measured qubits amplitudes (ndarray): Calculated amplitudes on each bitstring. rho (ndarray): Simulated density matrix of measured qubits \"\"\" def __init__ ( self , input_rho ): self . num = len ( input_rho . dims [ 0 ]) self . rho = np . array ( input_rho ) self . amplitudes = np . array ([]) if input_rho . type == 'ket' : self . amplitudes = np . abs ( np . array ( input_rho ) . ravel ()) ** 2 elif input_rho . type == 'oper' : self . amplitudes = np . abs ( np . diag ( input_rho )) ** 2 def plot_amplitudes ( self , full = True ): \"\"\" Plot the amplitudes from simulated results. Args: full (bool) : Whether plot on the full basis of measured qubits. \"\"\" from ..utils.basis import get_basis probs = self . amplitudes inds = range ( len ( probs )) if not full : inds = np . where ( self . amplitudes > 1e-14 )[ 0 ] probs = self . amplitudes [ inds ] plt . figure () plt . bar ( inds , probs , tick_label = [ bin ( i )[ 2 :] . zfill ( self . num ) for i in inds ]) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" )","title":"SimuResult"},{"location":"#quafu.results.results.SimuResult.plot_amplitudes","text":"Plot the amplitudes from simulated results. Parameters: Name Type Description Default full bool) Whether plot on the full basis of measured qubits. True Source code in quafu\\results\\results.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def plot_amplitudes ( self , full = True ): \"\"\" Plot the amplitudes from simulated results. Args: full (bool) : Whether plot on the full basis of measured qubits. \"\"\" from ..utils.basis import get_basis probs = self . amplitudes inds = range ( len ( probs )) if not full : inds = np . where ( self . amplitudes > 1e-14 )[ 0 ] probs = self . amplitudes [ inds ] plt . figure () plt . bar ( inds , probs , tick_label = [ bin ( i )[ 2 :] . zfill ( self . num ) for i in inds ]) plt . xticks ( rotation = 70 ) plt . ylabel ( \"amplitudes\" )","title":"plot_amplitudes()"},{"location":"#quafu.Task","text":"Bases: object Class for submitting quantum computation task to the backend. Attributes: Name Type Description token str) Apitoken that associate to your Quafu account. shots int Numbers of single shot measurement. compile bool Whether compile the circuit on the backend tomo bool Whether do tomography (Not support yet) Source code in quafu\\tasks\\tasks.pyclass Task ( object ): \"\"\" Class for submitting quantum computation task to the backend. Attributes: token (str) : Apitoken that associate to your Quafu account. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" def __init__ ( self ): self . _backend = ScQ_P10 () self . token = \"\" self . shots = 1000 self . tomo = False self . compile = True self . _url = \"\" def load_account ( self ): \"\"\" Load your Quafu account. \"\"\" homedir = get_homedir () file_dir = homedir + \"/.quafu/\" try : f = open ( file_dir + \"api\" , \"r\" ) data = f . readlines () self . token = data [ 0 ] . strip ( \" \\n \" ) self . _url = data [ 1 ] . strip ( \" \\n \" ) except : raise UserError ( \"User configure error. Please set up your token.\" ) def config ( self , backend = \"ScQ_P10\" , shots = 1000 , compile = True , tomo = False ): \"\"\" Configure the task properties Args: backend (str): Select the experimental backend. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" if backend == \"ScQ-P10\" : self . _backend = ScQ_P10 () elif backend == \"ScQ-P20\" : self . _backend = ScQ_P20 () elif backend == \"ScQ-P50\" : self . _backend = ScQ_P50 () self . shots = shots self . tomo = tomo self . compile = compile def get_backend_info ( self ): return self . _backend . get_info ( self . _url , self . token ) def submit ( self , qc , obslist = []): \"\"\" Execute the circuit with observable expectation measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. obslist (list[str, list[int]]): List of pauli string and its position. Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit.\\n 2) Measure 5-qubit Ising Hamiltonian we can use\\n obslist = [[\"X\", [i]] for i in range(5)]]\\n obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)])\\n For the energy expectation of Ising Hamiltonian \\n res, obsexp = q.submit_task(obslist)\\n E = sum(obsexp) \"\"\" # save input circuit inputs = qc . gates measures = list ( qc . measures . keys ()) if len ( obslist ) == 0 : print ( \"No observable measurement task.\" ) res = self . run ( qc ) return res , [] else : for obs in obslist : for p in obs [ 1 ]: if p not in measures : raise CircuitError ( \"Qubit %d in observer %s is not measured.\" % ( p , obs [ 0 ])) measure_basis , targlist = merge_measure ( obslist ) print ( \"Job start, need measured in \" , measure_basis ) exec_res = [] for measure_base in measure_basis : res = self . run ( qc , measure_base = measure_base ) qc . gates = inputs exec_res . append ( res ) measure_results = [] for obi in range ( len ( obslist )): obs = obslist [ obi ] rpos = [ measures . index ( p ) for p in obs [ 1 ]] measure_results . append ( exec_res [ targlist [ obi ]] . calculate_obs ( rpos )) return exec_res , measure_results def run ( self , qc , measure_base = []): \"\"\"Single run for measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. measure_base (list[str, list[int]]): measure base and it position. \"\"\" if len ( measure_base ) == 0 : res = self . send ( qc ) res . measure_base = '' else : for base , pos in zip ( measure_base [ 0 ], measure_base [ 1 ]): if base == \"X\" : qc . ry ( pos , - np . pi / 2 ) elif base == \"Y\" : qc . rx ( pos , np . pi / 2 ) res = self . send ( qc ) res . measure_base = measure_base return res def send ( self , qc ): \"\"\" Run the circuit on experimental device. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. Returns: ExecResult object that contain the dict return from quantum device. \"\"\" qc . to_openqasm () backends = { \"ScQ-P10\" : 0 , \"ScQ-P20\" : 1 , \"ScQ-P50\" : 2 } data = { \"qtasm\" : qc . openqasm , \"shots\" : self . shots , \"qubits\" : qc . num , \"scan\" : 0 , \"tomo\" : int ( self . tomo ), \"selected_server\" : backends [ self . _backend . name ], \"compile\" : int ( self . compile )} url = self . _url + \"qbackend/scq_kit/\" headers = { 'Content-Type' : 'application/x-www-form-urlencoded;charset=UTF-8' , 'api_token' : self . token } data = parse . urlencode ( data ) data = data . replace ( \"%27\" , \"'\" ) res = requests . post ( url , headers = headers , data = data ) res_dict = json . loads ( res . text ) if res . json ()[ \"status\" ] == 201 : raise UserError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5001 : raise CircuitError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5003 : raise ServerError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5004 : raise CompileError ( res_dict [ \"message\" ]) else : return ExecResult ( res_dict , qc . measures )","title":"Task"},{"location":"#quafu.tasks.tasks.Task.config","text":"Configure the task properties Parameters: Name Type Description Default backend str Select the experimental backend. 'ScQ_P10' shots int Numbers of single shot measurement. 1000 compile bool Whether compile the circuit on the backend True tomo bool Whether do tomography (Not support yet) False Source code in quafu\\tasks\\tasks.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def config ( self , backend = \"ScQ_P10\" , shots = 1000 , compile = True , tomo = False ): \"\"\" Configure the task properties Args: backend (str): Select the experimental backend. shots (int): Numbers of single shot measurement. compile (bool): Whether compile the circuit on the backend tomo (bool): Whether do tomography (Not support yet) \"\"\" if backend == \"ScQ-P10\" : self . _backend = ScQ_P10 () elif backend == \"ScQ-P20\" : self . _backend = ScQ_P20 () elif backend == \"ScQ-P50\" : self . _backend = ScQ_P50 () self . shots = shots self . tomo = tomo self . compile = compile","title":"config()"},{"location":"#quafu.tasks.tasks.Task.load_account","text":"Load your Quafu account. Source code in quafu\\tasks\\tasks.py 30 31 32 33 34 35 36 37 38 39 40 41 42 def load_account ( self ): \"\"\" Load your Quafu account. \"\"\" homedir = get_homedir () file_dir = homedir + \"/.quafu/\" try : f = open ( file_dir + \"api\" , \"r\" ) data = f . readlines () self . token = data [ 0 ] . strip ( \" \\n \" ) self . _url = data [ 1 ] . strip ( \" \\n \" ) except : raise UserError ( \"User configure error. Please set up your token.\" )","title":"load_account()"},{"location":"#quafu.tasks.tasks.Task.run","text":"Single run for measurement task. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required measure_base list [ str , list [ int ]] measure base and it position. [] Source code in quafu\\tasks\\tasks.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def run ( self , qc , measure_base = []): \"\"\"Single run for measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. measure_base (list[str, list[int]]): measure base and it position. \"\"\" if len ( measure_base ) == 0 : res = self . send ( qc ) res . measure_base = '' else : for base , pos in zip ( measure_base [ 0 ], measure_base [ 1 ]): if base == \"X\" : qc . ry ( pos , - np . pi / 2 ) elif base == \"Y\" : qc . rx ( pos , np . pi / 2 ) res = self . send ( qc ) res . measure_base = measure_base return res","title":"run()"},{"location":"#quafu.tasks.tasks.Task.send","text":"Run the circuit on experimental device. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required Returns: ExecResult object that contain the dict return from quantum device. Source code in quafu\\tasks\\tasks.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def send ( self , qc ): \"\"\" Run the circuit on experimental device. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. Returns: ExecResult object that contain the dict return from quantum device. \"\"\" qc . to_openqasm () backends = { \"ScQ-P10\" : 0 , \"ScQ-P20\" : 1 , \"ScQ-P50\" : 2 } data = { \"qtasm\" : qc . openqasm , \"shots\" : self . shots , \"qubits\" : qc . num , \"scan\" : 0 , \"tomo\" : int ( self . tomo ), \"selected_server\" : backends [ self . _backend . name ], \"compile\" : int ( self . compile )} url = self . _url + \"qbackend/scq_kit/\" headers = { 'Content-Type' : 'application/x-www-form-urlencoded;charset=UTF-8' , 'api_token' : self . token } data = parse . urlencode ( data ) data = data . replace ( \"%27\" , \"'\" ) res = requests . post ( url , headers = headers , data = data ) res_dict = json . loads ( res . text ) if res . json ()[ \"status\" ] == 201 : raise UserError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5001 : raise CircuitError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5003 : raise ServerError ( res_dict [ \"message\" ]) elif res . json ()[ \"status\" ] == 5004 : raise CompileError ( res_dict [ \"message\" ]) else : return ExecResult ( res_dict , qc . measures )","title":"send()"},{"location":"#quafu.tasks.tasks.Task.submit","text":"Execute the circuit with observable expectation measurement task. Parameters: Name Type Description Default qc QuantumCircuit Quantum circuit that need to be executed on backend. required obslist list [ str , list [ int ]] List of pauli string and its position. [] Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit. 2) Measure 5-qubit Ising Hamiltonian we can use obslist = [[\"X\", [i]] for i in range(5)]] obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)]) For the energy expectation of Ising Hamiltonian res, obsexp = q.submit_task(obslist) E = sum(obsexp) Source code in quafu\\tasks\\tasks.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def submit ( self , qc , obslist = []): \"\"\" Execute the circuit with observable expectation measurement task. Args: qc (QuantumCircuit): Quantum circuit that need to be executed on backend. obslist (list[str, list[int]]): List of pauli string and its position. Returns: List of executed results and list of measured observable Examples: 1) input [[\"XYX\", [0, 1, 2]], [\"Z\", [1]]] measure pauli operator XYX at 0, 1, 2 qubit, and Z at 1 qubit.\\n 2) Measure 5-qubit Ising Hamiltonian we can use\\n obslist = [[\"X\", [i]] for i in range(5)]]\\n obslist.extend([[\"ZZ\", [i, i+1]] for i in range(4)])\\n For the energy expectation of Ising Hamiltonian \\n res, obsexp = q.submit_task(obslist)\\n E = sum(obsexp) \"\"\" # save input circuit inputs = qc . gates measures = list ( qc . measures . keys ()) if len ( obslist ) == 0 : print ( \"No observable measurement task.\" ) res = self . run ( qc ) return res , [] else : for obs in obslist : for p in obs [ 1 ]: if p not in measures : raise CircuitError ( \"Qubit %d in observer %s is not measured.\" % ( p , obs [ 0 ])) measure_basis , targlist = merge_measure ( obslist ) print ( \"Job start, need measured in \" , measure_basis ) exec_res = [] for measure_base in measure_basis : res = self . run ( qc , measure_base = measure_base ) qc . gates = inputs exec_res . append ( res ) measure_results = [] for obi in range ( len ( obslist )): obs = obslist [ obi ] rpos = [ measures . index ( p ) for p in obs [ 1 ]] measure_results . append ( exec_res [ targlist [ obi ]] . calculate_obs ( rpos )) return exec_res , measure_results","title":"submit()"},{"location":"#quafu.User","text":"Bases: object Source code in quafu\\users\\userapi.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class User ( object ): def __init__ ( self ): self . apitoken = \"\" def save_apitoken ( self , apitoken ): \"\"\" Save your apitoken associate your Quafu account. \"\"\" self . apitoken = apitoken homedir = get_homedir () file_dir = homedir + \"/.quafu/\" if not os . path . exists ( file_dir ): os . mkdir ( file_dir ) with open ( file_dir + \"api\" , \"w\" ) as f : f . write ( self . apitoken + \" \\n \" ) f . write ( \"http://120.46.160.173/ \\n \" )","title":"User"},{"location":"#quafu.users.userapi.User.save_apitoken","text":"Save your apitoken associate your Quafu account. Source code in quafu\\users\\userapi.py 11 12 13 14 15 16 17 18 19 20 21 22 def save_apitoken ( self , apitoken ): \"\"\" Save your apitoken associate your Quafu account. \"\"\" self . apitoken = apitoken homedir = get_homedir () file_dir = homedir + \"/.quafu/\" if not os . path . exists ( file_dir ): os . mkdir ( file_dir ) with open ( file_dir + \"api\" , \"w\" ) as f : f . write ( self . apitoken + \" \\n \" ) f . write ( \"http://120.46.160.173/ \\n \" )","title":"save_apitoken()"}]}